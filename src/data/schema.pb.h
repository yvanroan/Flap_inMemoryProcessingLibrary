// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schema.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_schema_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_schema_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_schema_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_schema_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_schema_2eproto;
class Array;
class ArrayDefaultTypeInternal;
extern ArrayDefaultTypeInternal _Array_default_instance_;
class Table;
class TableDefaultTypeInternal;
extern TableDefaultTypeInternal _Table_default_instance_;
class Table_ColumnsEntry_DoNotUse;
class Table_ColumnsEntry_DoNotUseDefaultTypeInternal;
extern Table_ColumnsEntry_DoNotUseDefaultTypeInternal _Table_ColumnsEntry_DoNotUse_default_instance_;
class Value;
class ValueDefaultTypeInternal;
extern ValueDefaultTypeInternal _Value_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Array* Arena::CreateMaybeMessage<::Array>(Arena*);
template<> ::Table* Arena::CreateMaybeMessage<::Table>(Arena*);
template<> ::Table_ColumnsEntry_DoNotUse* Arena::CreateMaybeMessage<::Table_ColumnsEntry_DoNotUse>(Arena*);
template<> ::Value* Arena::CreateMaybeMessage<::Value>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Array PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Array) */ {
 public:
  inline Array() : Array(nullptr) {};
  virtual ~Array();

  Array(const Array& from);
  Array(Array&& from) noexcept
    : Array() {
    *this = ::std::move(from);
  }

  inline Array& operator=(const Array& from) {
    CopyFrom(from);
    return *this;
  }
  inline Array& operator=(Array&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Array& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Array* internal_default_instance() {
    return reinterpret_cast<const Array*>(
               &_Array_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Array& a, Array& b) {
    a.Swap(&b);
  }
  inline void Swap(Array* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Array* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Array* New() const final {
    return CreateMaybeMessage<Array>(nullptr);
  }

  Array* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Array>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Array& from);
  void MergeFrom(const Array& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Array* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Array";
  }
  protected:
  explicit Array(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_schema_2eproto);
    return ::descriptor_table_schema_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSequenceFieldNumber = 1,
  };
  // repeated .Value sequence = 1;
  int sequence_size() const;
  private:
  int _internal_sequence_size() const;
  public:
  void clear_sequence();
  ::Value* mutable_sequence(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Value >*
      mutable_sequence();
  private:
  const ::Value& _internal_sequence(int index) const;
  ::Value* _internal_add_sequence();
  public:
  const ::Value& sequence(int index) const;
  ::Value* add_sequence();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Value >&
      sequence() const;

  // @@protoc_insertion_point(class_scope:Array)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Value > sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class Table_ColumnsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Table_ColumnsEntry_DoNotUse, 
    std::string, ::Array,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Table_ColumnsEntry_DoNotUse, 
    std::string, ::Array,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Table_ColumnsEntry_DoNotUse();
  Table_ColumnsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Table_ColumnsEntry_DoNotUse& other);
  static const Table_ColumnsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Table_ColumnsEntry_DoNotUse*>(&_Table_ColumnsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Table.ColumnsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_schema_2eproto);
    return ::descriptor_table_schema_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class Table PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Table) */ {
 public:
  inline Table() : Table(nullptr) {};
  virtual ~Table();

  Table(const Table& from);
  Table(Table&& from) noexcept
    : Table() {
    *this = ::std::move(from);
  }

  inline Table& operator=(const Table& from) {
    CopyFrom(from);
    return *this;
  }
  inline Table& operator=(Table&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Table& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Table* internal_default_instance() {
    return reinterpret_cast<const Table*>(
               &_Table_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Table& a, Table& b) {
    a.Swap(&b);
  }
  inline void Swap(Table* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Table* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Table* New() const final {
    return CreateMaybeMessage<Table>(nullptr);
  }

  Table* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Table>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Table& from);
  void MergeFrom(const Table& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Table* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Table";
  }
  protected:
  explicit Table(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_schema_2eproto);
    return ::descriptor_table_schema_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kColumnsFieldNumber = 1,
    kNumRowFieldNumber = 2,
    kNumColumFieldNumber = 3,
  };
  // map<string, .Array> columns = 1;
  int columns_size() const;
  private:
  int _internal_columns_size() const;
  public:
  void clear_columns();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Array >&
      _internal_columns() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Array >*
      _internal_mutable_columns();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Array >&
      columns() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Array >*
      mutable_columns();

  // uint32 numRow = 2;
  void clear_numrow();
  ::PROTOBUF_NAMESPACE_ID::uint32 numrow() const;
  void set_numrow(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_numrow() const;
  void _internal_set_numrow(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 numColum = 3;
  void clear_numcolum();
  ::PROTOBUF_NAMESPACE_ID::uint32 numcolum() const;
  void set_numcolum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_numcolum() const;
  void _internal_set_numcolum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Table)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Table_ColumnsEntry_DoNotUse,
      std::string, ::Array,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > columns_;
  ::PROTOBUF_NAMESPACE_ID::uint32 numrow_;
  ::PROTOBUF_NAMESPACE_ID::uint32 numcolum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class Value PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Value) */ {
 public:
  inline Value() : Value(nullptr) {};
  virtual ~Value();

  Value(const Value& from);
  Value(Value&& from) noexcept
    : Value() {
    *this = ::std::move(from);
  }

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }
  inline Value& operator=(Value&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Value& default_instance();

  enum ValueCase {
    kIntVal = 2,
    kFloatVal = 3,
    kDoubleVal = 4,
    kStringVal = 5,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Value* internal_default_instance() {
    return reinterpret_cast<const Value*>(
               &_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Value& a, Value& b) {
    a.Swap(&b);
  }
  inline void Swap(Value* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Value* New() const final {
    return CreateMaybeMessage<Value>(nullptr);
  }

  Value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Value>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Value& from);
  void MergeFrom(const Value& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Value";
  }
  protected:
  explicit Value(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_schema_2eproto);
    return ::descriptor_table_schema_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsNullFieldNumber = 1,
    kIntValFieldNumber = 2,
    kFloatValFieldNumber = 3,
    kDoubleValFieldNumber = 4,
    kStringValFieldNumber = 5,
  };
  // bool is_null = 1;
  void clear_is_null();
  bool is_null() const;
  void set_is_null(bool value);
  private:
  bool _internal_is_null() const;
  void _internal_set_is_null(bool value);
  public:

  // int32 int_val = 2;
  private:
  bool _internal_has_int_val() const;
  public:
  void clear_int_val();
  ::PROTOBUF_NAMESPACE_ID::int32 int_val() const;
  void set_int_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int_val() const;
  void _internal_set_int_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float float_val = 3;
  private:
  bool _internal_has_float_val() const;
  public:
  void clear_float_val();
  float float_val() const;
  void set_float_val(float value);
  private:
  float _internal_float_val() const;
  void _internal_set_float_val(float value);
  public:

  // double double_val = 4;
  private:
  bool _internal_has_double_val() const;
  public:
  void clear_double_val();
  double double_val() const;
  void set_double_val(double value);
  private:
  double _internal_double_val() const;
  void _internal_set_double_val(double value);
  public:

  // string string_val = 5;
  private:
  bool _internal_has_string_val() const;
  public:
  void clear_string_val();
  const std::string& string_val() const;
  void set_string_val(const std::string& value);
  void set_string_val(std::string&& value);
  void set_string_val(const char* value);
  void set_string_val(const char* value, size_t size);
  std::string* mutable_string_val();
  std::string* release_string_val();
  void set_allocated_string_val(std::string* string_val);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_string_val();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_string_val(
      std::string* string_val);
  private:
  const std::string& _internal_string_val() const;
  void _internal_set_string_val(const std::string& value);
  std::string* _internal_mutable_string_val();
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:Value)
 private:
  class _Internal;
  void set_has_int_val();
  void set_has_float_val();
  void set_has_double_val();
  void set_has_string_val();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_null_;
  union ValueUnion {
    ValueUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int32 int_val_;
    float float_val_;
    double double_val_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_val_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_schema_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Array

// repeated .Value sequence = 1;
inline int Array::_internal_sequence_size() const {
  return sequence_.size();
}
inline int Array::sequence_size() const {
  return _internal_sequence_size();
}
inline void Array::clear_sequence() {
  sequence_.Clear();
}
inline ::Value* Array::mutable_sequence(int index) {
  // @@protoc_insertion_point(field_mutable:Array.sequence)
  return sequence_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Value >*
Array::mutable_sequence() {
  // @@protoc_insertion_point(field_mutable_list:Array.sequence)
  return &sequence_;
}
inline const ::Value& Array::_internal_sequence(int index) const {
  return sequence_.Get(index);
}
inline const ::Value& Array::sequence(int index) const {
  // @@protoc_insertion_point(field_get:Array.sequence)
  return _internal_sequence(index);
}
inline ::Value* Array::_internal_add_sequence() {
  return sequence_.Add();
}
inline ::Value* Array::add_sequence() {
  // @@protoc_insertion_point(field_add:Array.sequence)
  return _internal_add_sequence();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Value >&
Array::sequence() const {
  // @@protoc_insertion_point(field_list:Array.sequence)
  return sequence_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Table

// map<string, .Array> columns = 1;
inline int Table::_internal_columns_size() const {
  return columns_.size();
}
inline int Table::columns_size() const {
  return _internal_columns_size();
}
inline void Table::clear_columns() {
  columns_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Array >&
Table::_internal_columns() const {
  return columns_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Array >&
Table::columns() const {
  // @@protoc_insertion_point(field_map:Table.columns)
  return _internal_columns();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Array >*
Table::_internal_mutable_columns() {
  return columns_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Array >*
Table::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_map:Table.columns)
  return _internal_mutable_columns();
}

// uint32 numRow = 2;
inline void Table::clear_numrow() {
  numrow_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Table::_internal_numrow() const {
  return numrow_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Table::numrow() const {
  // @@protoc_insertion_point(field_get:Table.numRow)
  return _internal_numrow();
}
inline void Table::_internal_set_numrow(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  numrow_ = value;
}
inline void Table::set_numrow(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_numrow(value);
  // @@protoc_insertion_point(field_set:Table.numRow)
}

// uint32 numColum = 3;
inline void Table::clear_numcolum() {
  numcolum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Table::_internal_numcolum() const {
  return numcolum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Table::numcolum() const {
  // @@protoc_insertion_point(field_get:Table.numColum)
  return _internal_numcolum();
}
inline void Table::_internal_set_numcolum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  numcolum_ = value;
}
inline void Table::set_numcolum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_numcolum(value);
  // @@protoc_insertion_point(field_set:Table.numColum)
}

// -------------------------------------------------------------------

// Value

// bool is_null = 1;
inline void Value::clear_is_null() {
  is_null_ = false;
}
inline bool Value::_internal_is_null() const {
  return is_null_;
}
inline bool Value::is_null() const {
  // @@protoc_insertion_point(field_get:Value.is_null)
  return _internal_is_null();
}
inline void Value::_internal_set_is_null(bool value) {
  
  is_null_ = value;
}
inline void Value::set_is_null(bool value) {
  _internal_set_is_null(value);
  // @@protoc_insertion_point(field_set:Value.is_null)
}

// int32 int_val = 2;
inline bool Value::_internal_has_int_val() const {
  return value_case() == kIntVal;
}
inline void Value::set_has_int_val() {
  _oneof_case_[0] = kIntVal;
}
inline void Value::clear_int_val() {
  if (_internal_has_int_val()) {
    value_.int_val_ = 0;
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Value::_internal_int_val() const {
  if (_internal_has_int_val()) {
    return value_.int_val_;
  }
  return 0;
}
inline void Value::_internal_set_int_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_int_val()) {
    clear_value();
    set_has_int_val();
  }
  value_.int_val_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Value::int_val() const {
  // @@protoc_insertion_point(field_get:Value.int_val)
  return _internal_int_val();
}
inline void Value::set_int_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int_val(value);
  // @@protoc_insertion_point(field_set:Value.int_val)
}

// float float_val = 3;
inline bool Value::_internal_has_float_val() const {
  return value_case() == kFloatVal;
}
inline void Value::set_has_float_val() {
  _oneof_case_[0] = kFloatVal;
}
inline void Value::clear_float_val() {
  if (_internal_has_float_val()) {
    value_.float_val_ = 0;
    clear_has_value();
  }
}
inline float Value::_internal_float_val() const {
  if (_internal_has_float_val()) {
    return value_.float_val_;
  }
  return 0;
}
inline void Value::_internal_set_float_val(float value) {
  if (!_internal_has_float_val()) {
    clear_value();
    set_has_float_val();
  }
  value_.float_val_ = value;
}
inline float Value::float_val() const {
  // @@protoc_insertion_point(field_get:Value.float_val)
  return _internal_float_val();
}
inline void Value::set_float_val(float value) {
  _internal_set_float_val(value);
  // @@protoc_insertion_point(field_set:Value.float_val)
}

// double double_val = 4;
inline bool Value::_internal_has_double_val() const {
  return value_case() == kDoubleVal;
}
inline void Value::set_has_double_val() {
  _oneof_case_[0] = kDoubleVal;
}
inline void Value::clear_double_val() {
  if (_internal_has_double_val()) {
    value_.double_val_ = 0;
    clear_has_value();
  }
}
inline double Value::_internal_double_val() const {
  if (_internal_has_double_val()) {
    return value_.double_val_;
  }
  return 0;
}
inline void Value::_internal_set_double_val(double value) {
  if (!_internal_has_double_val()) {
    clear_value();
    set_has_double_val();
  }
  value_.double_val_ = value;
}
inline double Value::double_val() const {
  // @@protoc_insertion_point(field_get:Value.double_val)
  return _internal_double_val();
}
inline void Value::set_double_val(double value) {
  _internal_set_double_val(value);
  // @@protoc_insertion_point(field_set:Value.double_val)
}

// string string_val = 5;
inline bool Value::_internal_has_string_val() const {
  return value_case() == kStringVal;
}
inline void Value::set_has_string_val() {
  _oneof_case_[0] = kStringVal;
}
inline void Value::clear_string_val() {
  if (_internal_has_string_val()) {
    value_.string_val_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_value();
  }
}
inline const std::string& Value::string_val() const {
  // @@protoc_insertion_point(field_get:Value.string_val)
  return _internal_string_val();
}
inline void Value::set_string_val(const std::string& value) {
  _internal_set_string_val(value);
  // @@protoc_insertion_point(field_set:Value.string_val)
}
inline std::string* Value::mutable_string_val() {
  // @@protoc_insertion_point(field_mutable:Value.string_val)
  return _internal_mutable_string_val();
}
inline const std::string& Value::_internal_string_val() const {
  if (_internal_has_string_val()) {
    return value_.string_val_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Value::_internal_set_string_val(const std::string& value) {
  if (!_internal_has_string_val()) {
    clear_value();
    set_has_string_val();
    value_.string_val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_val_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Value::set_string_val(std::string&& value) {
  // @@protoc_insertion_point(field_set:Value.string_val)
  if (!_internal_has_string_val()) {
    clear_value();
    set_has_string_val();
    value_.string_val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_val_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Value.string_val)
}
inline void Value::set_string_val(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_string_val()) {
    clear_value();
    set_has_string_val();
    value_.string_val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_val_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Value.string_val)
}
inline void Value::set_string_val(const char* value,
                             size_t size) {
  if (!_internal_has_string_val()) {
    clear_value();
    set_has_string_val();
    value_.string_val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_val_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:Value.string_val)
}
inline std::string* Value::_internal_mutable_string_val() {
  if (!_internal_has_string_val()) {
    clear_value();
    set_has_string_val();
    value_.string_val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.string_val_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Value::release_string_val() {
  // @@protoc_insertion_point(field_release:Value.string_val)
  if (_internal_has_string_val()) {
    clear_has_value();
    return value_.string_val_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Value::set_allocated_string_val(std::string* string_val) {
  if (has_value()) {
    clear_value();
  }
  if (string_val != nullptr) {
    set_has_string_val();
    value_.string_val_.UnsafeSetDefault(string_val);
  }
  // @@protoc_insertion_point(field_set_allocated:Value.string_val)
}
inline std::string* Value::unsafe_arena_release_string_val() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Value.string_val)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_string_val()) {
    clear_has_value();
    return value_.string_val_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Value::unsafe_arena_set_allocated_string_val(std::string* string_val) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_string_val()) {
    value_.string_val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (string_val) {
    set_has_string_val();
    value_.string_val_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_val, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Value.string_val)
}

inline bool Value::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Value::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Value::ValueCase Value::value_case() const {
  return Value::ValueCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_schema_2eproto
